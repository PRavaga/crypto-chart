<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Core</name>
    </assembly>
    <members>
        <member name="T:Telerik.Core.AnimationContext">
            <summary>
            A helper class, used for chain-creation and update of storyboards in a jQuery way.
            This class is for internal use only.
            </summary>
            <remarks>
            The Result storyboard is a collection of DoubleAnimationUsingKeyFrame collection.
            </remarks>
        </member>
        <member name="P:Telerik.Core.AnimationContext.Storyboard">
            <summary>
            Gets the resultant Storyboard for the AnimationContext.
            </summary>
        </member>
        <member name="P:Telerik.Core.AnimationContext.Arguments">
            <summary>
            Gets optional arguments associated with the animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.AnimationContext.Target">
            <summary>
            Gets the UIElement instance, which is the actual target of the animation.
            </summary>
        </member>
        <member name="T:Telerik.Core.AnimationEndedEventArgs">
            <summary>
            Contains information about the <see cref="E:Telerik.Core.RadAnimation.Ended"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Core.AnimationEndedEventArgs.#ctor(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.AnimationEndedEventArgs" /> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:Telerik.Core.AnimationEndedEventArgs.AnimationInfo">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.UIElement"/> that was animated by the animation
            for which the <see cref="E:Telerik.Core.RadAnimation.Ended"/> event fires.
            </summary>
        </member>
        <member name="T:Telerik.Core.AnimationExtensions">
            <summary>
            Provides extension methods related to the Telerik Silverlight Animation Framework.
            </summary>
        </member>
        <member name="T:Telerik.Core.AnimationFillBehavior">
            <summary>
            Defines the fill behavior for a <see cref="T:Telerik.Core.RadAnimation"/> instance.
            </summary>
        </member>
        <member name="F:Telerik.Core.AnimationFillBehavior.Inherit">
            <summary>
            The behavior is inherited either from a parent <see cref="T:Telerik.Core.RadAnimationGroup"/> or the associated Storyboard.
            </summary>
        </member>
        <member name="F:Telerik.Core.AnimationFillBehavior.HoldEnd">
            <summary>
            Same as <see cref="T:System.Windows.Media.Animation.FillBehavior.HoldEnd"/>.
            </summary>
        </member>
        <member name="F:Telerik.Core.AnimationFillBehavior.Stop">
            <summary>
            Same as <see cref="T:System.Windows.Media.Animation.FillBehavior.Stop"/>.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadAnimationGroup">
            <summary>
            Represents composite animation, used for declaratively creating composite animations.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadAnimationGroup"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimationGroup.Children">
            <summary>
            Gets a list of the children animation objects of this composite animation.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <summary>
            Sets the initial animation values to the provided target element.
            </summary>
            <param name="target">The target element.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Applies already stored (if any) animated values.
            </summary>
            <param name="info">The animation info.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.CloneCore">
            <summary>
            Creates a clone animation of this instance.
            </summary>
            <returns>Returns a clone of this animation.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.CreateStoryboardOverride(Windows.UI.Xaml.UIElement)">
            <summary>
            Core create routine.
            </summary>
            <param name="target">The targeted element of the animation.</param>
            <returns>The newly created animation.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationGroup.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadAnimationManager">
            <summary>
            Static manager class used for dynamic animations of controls.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadAnimationManager.AnimationSelectorProperty">
            <summary>
            Represents the AnimationSelector attached property.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadAnimationManager.IsAnimationEnabledProperty">
            <summary>
            Identifies the IsAnimationEnabled attached property.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadAnimationManager.AnimationInfoProperty">
            <summary>
            Identifies the Animation attached property.
            </summary>
            <remarks>
                   <para>
                       This property is used to bind the corresponding RadAnimation to a storyboard.
                   </para>
            </remarks>
        </member>
        <member name="P:Telerik.Core.RadAnimationManager.IsGlobalAnimationEnabled">
            <summary>
            Gets or sets a value indicating whether the Animation for the whole application will be enabled.
            This value overrides all other properties.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimationManager.SpeedRatio">
            <summary>
            Gets or sets the global animation speed ration that will be used if no local speed ratio is set.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.GetAnimationSelector(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the AnimationSelector for the given DependencyObject, normally a control.
            </summary>
            <param name="obj">The target animated object, normally a control.</param>
            <returns>The animation selector for the object.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.SetAnimationSelector(Windows.UI.Xaml.DependencyObject,Telerik.Core.AnimationSelectorBase)">
            <summary>
            Sets the Animation selector for the given DependencyObject, normally a Control.
            </summary>
            <param name="obj">The target animated object, normally a control.</param>
            <param name="value">The AnimationSelector to assign.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.GetIsAnimationEnabled(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets a value indicating whether animation is enabled for the given Control.
            </summary>
            <param name="obj">The dependency object for which to check the value, normally a control.</param>
            <returns>True if animation is enabled, false otherwise.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.SetIsAnimationEnabled(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets a value indicating whether animation is enabled for the given Control.
            </summary>
            <param name="obj">The dependency object for which to check the value, normally a control.</param>
            <param name="value">True if animation should be enabled, false otherwise.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.CanAnimate(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determines whether animation is supported for the specified element.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.Stop(Windows.UI.Xaml.UIElement,Telerik.Core.RadAnimation)">
            <summary>
            Stops an animation if it is currently active or filling.
            </summary>
            <param name="target">The control to stop the animation for.</param>
            <param name="animation">The animation to stop.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.StopIfRunning(Windows.UI.Xaml.UIElement,Telerik.Core.RadAnimation)">
            <summary>
            Stops an animation if it is currently active or filling.
            </summary>
            <param name="target">The target that is being animated.</param>
            <param name="animation">The animation to stop if running.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.IsAnimationRunning(Windows.UI.Xaml.UIElement,Telerik.Core.RadAnimation)">
            <summary>
            Determines if the provided animation is running on the specified target.
            </summary>
            <param name="target">The target of the animation.</param>
            <param name="animation">The animation to check if it is running or not.</param>
            <returns>Returns true if the animation is animating the target and false otherwise.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.Play(Windows.UI.Xaml.UIElement,Telerik.Core.RadAnimation)">
            <summary>
            Plays the provides animation on the specified target.
            </summary>
            <param name="target">The <see cref="T:System.Windows.UIElement"/> instance to be animated.</param>
            <param name="animation">The <see cref="T:Telerik.Core.RadAnimation"/> instance that describes the animation process.</param>
            <returns>True if the animation has been successfully executed, false otherwise.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.Play(Windows.UI.Xaml.UIElement,Telerik.Core.RadAnimation,System.Action)">
            <summary>
            Plays the provides animation on the specified target.
            </summary>
            <param name="target">The <see cref="T:System.Windows.UIElement"/> instance to be animated.</param>
            <param name="animation">The <see cref="T:Telerik.Core.RadAnimation"/> instance that describes the animation process.</param>
            <param name="completedCallback">Optional callback to notify the caller for animation completion.</param>
            <returns>True if the animation has been successfully executed, false otherwise.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimationManager.IsAnimationScheduled(Windows.UI.Xaml.UIElement,Telerik.Core.RadAnimation)">
            <summary>
            Returns a boolean value determining whether an animation has been scheduled for the given <see cref="T:Windows.UI.Xaml.UIElement"/>.
            </summary>
            <param name="element">The <see cref="T:Windows.UI.Xaml.UIElement"/> instance for which to check whether the given <see cref="T:Telerik.Core.RadAnimation"/> is scheduled.</param>
            <param name="animation">The <see cref="T:Telerik.Core.RadAnimation"/> instance for which to check whether it has been scheduled for the given <see cref="T:Windows.UI.Xaml.UIElement"/>.</param>
            <returns>True if an animation is scheduled for the element, otherwise false.</returns>
        </member>
        <member name="T:Telerik.Core.RadAnimationSelector">
            <summary>
            Animation Selector, used for easier definition of animations in XAML.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimationSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadAnimationSelector"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimationSelector.Animations">
            <summary>
            Gets the list of animations in that this selector will choose from.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimationSelector.SelectAnimation(Windows.UI.Xaml.UIElement,System.String)">
            <summary>
            Selects an animation based on its AnimationName.
            </summary>
            <remarks>
                   <para>
                       The AnimationSelector will return the animation with matching name from
                       its <strong>Animations</strong> list.
                   </para>
            </remarks>
            <param name="control">The control the animation is needed for.</param>
            <param name="name">The name of the animation. Often it is a change of state, result of a user action.</param>
            <returns>The RadAnimation object.</returns>
            <seealso cref="P:Telerik.Core.RadAnimationSelector.Animations"/>
        </member>
        <member name="T:Telerik.Core.AnimationSelectorBase">
            <summary>
            Base class for selecting DynamicAnimations.
            </summary>
        </member>
        <member name="M:Telerik.Core.AnimationSelectorBase.SelectAnimation(Windows.UI.Xaml.UIElement,System.String)">
            <summary>
                   <para>
                       When overridden in derived classes, it selects an animation for the specific
                       control and reason.
                   </para>
            </summary>
            <param name="control">The control the animation is needed for.</param>
            <param name="name">The reason for the animation. Often it is a change of state, result of a user action.</param>
            <returns>The RadAnimation object.</returns>
        </member>
        <member name="T:Telerik.Core.RadContinuumAnimation">
            <summary>
            Provides an animation exact copy of the Windows Phone list based transition.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadContinuumAnimation.HeaderElementProperty">
            <summary>
            Identifies the HeaderElement property.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadContinuumAnimation.ContinuumElementProperty">
            <summary>
            Identifies the ContinuumElement property.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadContinuumAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadContinuumAnimation.InOutAnimationMode">
            <summary>
            Gets or sets the in out animation mode.
            </summary>
            <value>The in out animation mode.</value>
        </member>
        <member name="P:Telerik.Core.RadContinuumAnimation.SelectedItemDelay">
            <summary>
            Gets or sets the selected item delay.
            </summary>
            <value>The selected item delay.</value>
        </member>
        <member name="P:Telerik.Core.RadContinuumAnimation.ItemAnimationDuration">
            <summary>
            Gets or sets the duration of the item animation.
            </summary>
            <value>The duration of the item animation.</value>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.GetHeaderElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the PageHeader dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.SetPageHeader(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the PageHeader dependency property on an object.
            </summary>
            <param name="source">The object to set the property on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.GetContinuumElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the ContinuumElement dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.SetContinuumElement(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the ContinuumElement dependency property on an object.
            </summary>
            <param name="source">The object to set the property on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.OnStarted(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadContinuumAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadEmptyAnimation">
            <summary>
            Empty animation.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadFadeAnimation">
            <summary>
            Fade animation for showing/hiding elements.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadFadeAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadFadeAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadFadeAnimation.StartOpacity">
            <summary>
            Gets or sets a value from which the animation will start.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadFadeAnimation.EndOpacity">
            <summary>
            Gets or sets a value will be applied when the animation finishes.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadFadeAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadFadeAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadFadeAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadFadeAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadFadeAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.ElementScreenShotInfo">
            <summary>
            Replaces an element with a screenshot and positions the screenshot in a popup, keeping the same location.
            </summary>
        </member>
        <member name="M:Telerik.Core.ElementScreenShotInfo.#ctor(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.ElementScreenShotInfo"/> class.
            </summary>
            <param name="targetElement">The target element.</param>
        </member>
        <member name="P:Telerik.Core.ElementScreenShotInfo.OriginalOpacity">
            <summary>
            Gets or sets the original opacity.
            </summary>
            <value>The original opacity.</value>
        </member>
        <member name="P:Telerik.Core.ElementScreenShotInfo.OriginalLocation">
            <summary>
            Gets or sets the original location.
            </summary>
            <value>The original location.</value>
        </member>
        <member name="P:Telerik.Core.ElementScreenShotInfo.Popup">
            <summary>
            Gets or sets the popup.
            </summary>
            <value>The popup.</value>
        </member>
        <member name="P:Telerik.Core.ElementScreenShotInfo.ScreenShotContainer">
            <summary>
            Gets or sets the screen shot container.
            </summary>
            <value>The screen shot container.</value>
        </member>
        <member name="T:Telerik.Core.RadMoveAndFadeAnimation">
            <summary>
            Provides a pre-defined move and fade animation group.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveAndFadeAnimation.#ctor">
            <summary>
            Initializes a new instance of the RadMoveAndFadeAnimation class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAndFadeAnimation.FadeAnimation">
            <summary>
            Gets the start position for the move animation.
            If not set, the current element TranslateTransform is used if it exists, otherwise the empty point (0, 0) is used.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAndFadeAnimation.MoveAnimation">
            <summary>
            Gets the end position for the move animation.
            If not set, the current element TranslateTransform is used if it exists, otherwise the empty point (0, 0) is used.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveAndFadeAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadMoveAndFadeAnimation.CreateMoveAnimation">
            <summary>
            Called in the constructor to create a default move animation.
            </summary>
            <returns>A new instance of RadMoveAnimation.</returns>
        </member>
        <member name="M:Telerik.Core.RadMoveAndFadeAnimation.CreateFadeAnimation">
            <summary>
            Called in the constructor to create a default fade animation.
            </summary>
            <returns>A new instance of RadFadeAnimation.</returns>
        </member>
        <member name="T:Telerik.Core.RadMoveAnimation">
            <summary>
            Moves the target element from a start point to an end point.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadMoveAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAnimation.MiddlePointsXAxis">
            <summary>
            Gets or sets the middle points of the X animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAnimation.MiddlePointsYAxis">
            <summary>
            Gets or sets the middle points of the Y animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAnimation.MoveDirection">
            <summary>
            Gets or sets a value that describes from to where the animated element should move.
            For more precise control use the StartPoint and EndPoint and set MoveDirection to null.
            Move direction has precedence over StartPoint and EndPoint.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAnimation.StartPoint">
            <summary>
            Gets or sets the start position for the animation.
            If not set, the current element TranslateTransform (if any) is used or an empty Point - that is [0,0].
            If MoveDirection is set this property is disregarded.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAnimation.EndPoint">
            <summary>
            Gets or sets the end position of the animation.
            If not set, the current element TranslateTransform (if any) is used or an empty Point - that is [0,0].
            If MoveDirection is set this property is disregarded.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAnimation.PointMode">
            <summary>
            Gets or sets a value that determines how the move animation's start and end points will be interpreted.
            Absolute means that they will be interpreted as pixels and Relative means that they will interpreted as
            points in the [-1, 1] range.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveAnimation.Duration">
            <summary>
            Gets or sets the duration of the animation. Defaults to (0:0:.4) - 400 milliseconds.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadMoveAnimation.GetPoint(Windows.UI.Xaml.UIElement,System.Nullable{Windows.Foundation.Point})">
            <summary>
            Gets the value of a nullable point if it is not null. If it is null it returns a point that represents the X and Y
            components of the target's TranslateTransform.
            </summary>
            <param name="target">The target from which to obtain a point if the provided point is null.</param>
            <param name="point">A nullable point.</param>
            <returns>Returns the value of a nullable point if it is not null. If it is null it returns a point that represents the X and Y
            components of the target's TranslateTransform.</returns>
        </member>
        <member name="M:Telerik.Core.RadMoveAnimation.GetOppositeDirection(Telerik.Core.MoveDirection)">
            <summary>
            Gets the move direction value, opposite (mirrored) to the specified one.
            </summary>
            <param name="direction">The direction which opposite value should be calculated.</param>
        </member>
        <member name="M:Telerik.Core.RadMoveAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="M:Telerik.Core.RadMoveAnimation.GetStartEndPoints(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the start and end point arguments based on the current MoveDirection value.
            </summary>
            <param name="element">The target which is required in order to determine the move length. The move length is equal to the render size of target.</param>
        </member>
        <member name="T:Telerik.Core.MoveAnimationBase">
            <summary>
            This is the base class of the move X and move Y animations.
            </summary>
        </member>
        <member name="M:Telerik.Core.MoveAnimationBase.#ctor">
            <summary>
            Initializes a new instance of the MoveAnimationBase class.
            </summary>
        </member>
        <member name="P:Telerik.Core.MoveAnimationBase.PointMode">
            <summary>
            Gets or sets a value that determines how the move animation's start and end points will be interpreted.
            Absolute means that they will be interpreted as pixels and Relative means that they will interpreted as
            points in the [-1, 1] range.
            </summary>
        </member>
        <member name="P:Telerik.Core.MoveAnimationBase.MiddlePointsAxis">
            <summary>
            Gets or sets the middle points.
            </summary>
            <value>The middle points.</value>
        </member>
        <member name="M:Telerik.Core.MoveAnimationBase.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.MoveAnimationBase.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.MoveAnimationBase.SwapValues">
            <summary>
            This method must be overridden and is called when this move animation has to swap its start and end values.
            This is necessary when an opposite animation is created.
            </summary>
        </member>
        <member name="M:Telerik.Core.MoveAnimationBase.GetMoveArguments(System.Double,System.Double)">
            <summary>
            Gets an array of interleaved duration/value pairs for this move animation's keyframes.
            </summary>
            <param name="startValue">The value of the first frame.</param>
            <param name="endValue">The value of the last frame.</param>
            <returns>Returns an array of interleaved duration/value pairs for this move animation's keyframes.</returns>
        </member>
        <member name="T:Telerik.Core.MoveAnimationPointMode">
            <summary>
            Determines how the start and end points of the move animation will be interpreted.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveAnimationPointMode.Absolute">
            <summary>
            Absolute coordinates.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveAnimationPointMode.Relative">
            <summary>
            Relative coordinates.
            </summary>
        </member>
        <member name="T:Telerik.Core.MoveDirection">
            <summary>
            Provides intuitive values which describe common move animation scenarios.
            For example LeftIn means that the animated element is moving left and is coming in view.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.LeftIn">
            <summary>
            Left in.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.LeftOut">
            <summary>
            Left out.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.RightIn">
            <summary>
            Right in.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.RightOut">
            <summary>
            Right out.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.TopIn">
            <summary>
            Top in.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.TopOut">
            <summary>
            Top out.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.BottomIn">
            <summary>
            Bottom in.
            </summary>
        </member>
        <member name="F:Telerik.Core.MoveDirection.BottomOut">
            <summary>
            Bottom out.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadMoveXAnimation">
            <summary>
            Represents a move animation on the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveXAnimation.StartX">
            <summary>
            Gets or sets the start X value.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveXAnimation.EndX">
            <summary>
            Gets or sets the end X value.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveXAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadMoveXAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadMoveXAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadMoveXAnimation.GetX(Windows.UI.Xaml.UIElement,System.Nullable{System.Double})">
            <summary>
            Gets the value of a nullable X value if it is not null. If it is null it returns a point that represents the X
            component of the target's TranslateTransform.
            </summary>
            <param name="target">The target from which to obtain a point if the provided point is null.</param>
            <param name="x">A nullable X coordinate.</param>
            <returns>Returns the value of a nullable X value if it is not null. If it is null it returns a value that represents the X
            component of the target's TranslateTransform.</returns>
        </member>
        <member name="M:Telerik.Core.RadMoveXAnimation.GetRelativeX(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Double})">
            <summary>
            Gets an X value that is relative to the size of the animation target.
            </summary>
            <param name="target">The animation target.</param>
            <param name="x">The X value in relative coordinates.</param>
            <returns>Returns an X value in absolute coordinates based on the target's size and the relative argument.</returns>
        </member>
        <member name="M:Telerik.Core.RadMoveXAnimation.SwapValues">
            <summary>
            This method must be overridden and is called when this move animation has to swap its start and end values.
            This is necessary when an opposite animation is created.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveXAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadMoveYAnimation">
            <summary>
            Represents a move animation on the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveYAnimation.StartY">
            <summary>
            Gets or sets the start Y value.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadMoveYAnimation.EndY">
            <summary>
            Gets or sets the end Y value.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveYAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadMoveYAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadMoveYAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadMoveYAnimation.GetY(Windows.UI.Xaml.UIElement,System.Nullable{System.Double})">
            <summary>
            Gets the value of a nullable Y value if it is not null. If it is null it returns a value that represents the Y
            component of the target's TranslateTransform.
            </summary>
            <param name="target">The target from which to obtain a Y value if the provided Y value is null.</param>
            <param name="y">A nullable Y value.</param>
            <returns>Returns the value of a nullable Y value if it is not null. If it is null it returns a point that represents the Y
            component of the target's TranslateTransform.</returns>
        </member>
        <member name="M:Telerik.Core.RadMoveYAnimation.GetRelativeY(Windows.UI.Xaml.FrameworkElement,System.Nullable{System.Double})">
            <summary>
            Gets a Y value that is relative to the height of the animation target.
            </summary>
            <param name="target">The animation target.</param>
            <param name="y">The Y value in relative coordinates.</param>
            <returns>Returns a Y value in absolute coordinates based on the target's height and the relative value.</returns>
        </member>
        <member name="M:Telerik.Core.RadMoveYAnimation.SwapValues">
            <summary>
            This method must be overridden and is called when this move animation has to swap its start and end values.
            This is necessary when an opposite animation is created.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMoveYAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.ReverseMode">
            <summary>
            This enumeration can be used to obtain a partially reversed perspective animation.
            </summary>
        </member>
        <member name="F:Telerik.Core.ReverseMode.StartEndAngles">
            <summary>
            Reverse start and end angles.
            </summary>
        </member>
        <member name="F:Telerik.Core.ReverseMode.RotationDirection">
            <summary>
            Reverse direction.
            </summary>
        </member>
        <member name="T:Telerik.Core.PerspectiveAnimationAxis">
            <summary>
            Predefined possible axes in the perspective animation.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationAxis.X">
            <summary>
            The X axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationAxis.Y">
            <summary>
            The Y axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationAxis.Z">
            <summary>
            The Z axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationAxis.XY">
            <summary>
            Both X and Y axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationAxis.XZ">
            <summary>
            Both X and Z axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationAxis.YZ">
            <summary>
            Both Y and Z axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationAxis.All">
            <summary>
            All axes.
            </summary>
        </member>
        <member name="T:Telerik.Core.PerspectiveAnimationDirection">
            <summary>
            Defines the direction of a perspective animation.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationDirection.Clockwise">
            <summary>
            Animation is clock-wise orientated.
            </summary>
        </member>
        <member name="F:Telerik.Core.PerspectiveAnimationDirection.CounterClockwise">
            <summary>
            Animation is counter clock-wise orientated.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadPlaneProjectionAnimation">
            <summary>
            Defines animation that changes the perspective of the target element.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadPlaneProjectionAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadPlaneProjectionAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.StartAngleX">
            <summary>
            Gets or sets the starting angle of the perspective rotation along the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.EndAngleX">
            <summary>
            Gets or sets the end angle of the perspective rotation along the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.StartAngleY">
            <summary>
            Gets or sets the starting angle of the perspective rotation along the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.EndAngleY">
            <summary>
            Gets or sets the end angle of the perspective rotation along the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.StartAngleZ">
            <summary>
            Gets or sets the starting angle of the perspective rotation along the Z axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.EndAngleZ">
            <summary>
            Gets or sets the end angle of the perspective rotation along the Z axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.CenterX">
            <summary>
            Gets or sets the center of the rotation along the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.CenterY">
            <summary>
            Gets or sets the center of the rotation along the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.CenterZ">
            <summary>
            Gets or sets the center of the rotation along the Z axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.Axes">
            <summary>
            Gets or sets the axes along which rotation should occur.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPlaneProjectionAnimation.Direction">
            <summary>
            Gets or sets the direction of the animation.
            That is the rotation direction - clockwise or counter-clockwise.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadPlaneProjectionAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadPlaneProjectionAnimation.CreateOpposite(Telerik.Core.ReverseMode)">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            A new instance of this animation that is the reverse of this instance.
            </returns>
        </member>
        <member name="M:Telerik.Core.RadPlaneProjectionAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadPlaneProjectionAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadPlaneProjectionAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadPlaneProjectionAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadTileAnimation">
            <summary>
            Provides an animation that sequentially animates items in a container. The end effect is
            similar to the animation of the home screen on the Windows Phone OS.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadTileAnimation.ContainerToAnimateProperty">
            <summary>
            Identifies the ContainerToAnimate property.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadTileAnimation.ElementToDelayProperty">
            <summary>
            Identifies the ElementToDelay property.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadTileAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.InOutAnimationMode">
            <summary>
            Gets or sets the in out animation mode.
            </summary>
            <value>The in out animation mode.</value>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.PerspectiveAngleY">
            <summary>
            Gets or sets the starting angle of the perspective rotation along the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.PerspectiveAngleX">
            <summary>
            Gets or sets the starting angle of the perspective rotation along the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.IsTranslationEnabled">
            <summary>
            Gets or sets a value indicating whether plane projection will be combined with a translate transform to enable the Turnstile effect.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.SequentialItemDelay">
            <summary>
            Gets or sets the delay between the items start animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.SequentialMode">
            <summary>
            Gets or sets the sequential mode.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.SelectedItemDelay">
            <summary>
            Gets or sets the selected item delay.
            </summary>
            <value>The selected item delay.</value>
        </member>
        <member name="P:Telerik.Core.RadTileAnimation.ItemAnimationDuration">
            <summary>
            Gets or sets the duration of the item animation.
            </summary>
            <value>The duration of the item animation.</value>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.GetContainerToAnimate(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the ContainerToAnimate dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.SetContainerToAnimate(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the ContainerToAnimate dependency property on an object.
            </summary>
            <param name="source">The object to set the property on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.GetElementToDelay(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the ElementToDelay dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.SetElementToDelay(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the ElementToDelay dependency property on an object.
            </summary>
            <param name="source">The object to set the property on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="M:Telerik.Core.RadTileAnimation.OnEnded(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Telerik.Core.RadResizeAnimation">
            <summary>
            Animation for smooth resizing elements.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadResizeAnimation.#ctor">
            <summary>
            Initializes a new instance of the RadResizeAnimation class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeAnimation.StartSize">
            <summary>
            Gets or sets the Size structure that defines the initial size. If no value is applied current element size is used.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeAnimation.EndSize">
            <summary>
            Gets or sets the final size of the animated element. If no value is applied current element size is used.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeAnimation.Duration">
            <summary>
            Gets or sets the duration of the animation. Defaults to (0:0:.4) - 400 milliseconds.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadResizeHeightAnimation">
            <summary>
            This class represents a resize animation that animates the FrameworkElement.Height property.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeHeightAnimation.StartHeight">
            <summary>
            Gets or sets the initial height. If no value is applied current element height is used.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeHeightAnimation.EndHeight">
            <summary>
            Gets or sets the final height of the animation target. If no value is applied current element height is used.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeHeightAnimation.Width">
            <summary>
            Gets or sets a the width that will be applied to the animation target during this animation.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadResizeHeightAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadResizeHeightAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadResizeHeightAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadResizeHeightAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadResizeHeightAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadResizeWidthAnimation">
            <summary>
            This class represents a resize animation that animates the FrameworkElement.Width property.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeWidthAnimation.StartWidth">
            <summary>
            Gets or sets the initial width. If no value is applied current element width is used.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeWidthAnimation.EndWidth">
            <summary>
            Gets or sets the final width of the animation target. If no value is applied current element width is used.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadResizeWidthAnimation.Height">
            <summary>
            Gets or sets a the height that will be applied to the animation target during this animation.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadResizeWidthAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadResizeWidthAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadResizeWidthAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <summary>
            Sets the initial animation values to the provided target element.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadResizeWidthAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadResizeWidthAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadScaleAndFadeAnimation">
            <summary>
            Provides a pre-defined scale and fade animation group.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleAndFadeAnimation.#ctor">
            <summary>
            Initializes a new instance of the RadScaleAndFadeAnimation class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAndFadeAnimation.ScaleAnimation">
            <summary>
            Gets the scale animation instance.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAndFadeAnimation.FadeAnimation">
            <summary>
            Gets the fade animation instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleAndFadeAnimation.CreateScaleAnimation">
            <summary>
            Called in the constructor to create the default scale animation.
            </summary>
            <returns>Returns a new instance of RadScaleAnimation.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleAndFadeAnimation.CreateFadeAnimation">
            <summary>
            Called in the constructor to create the default fade animation.
            </summary>
            <returns>Returns a new instance of RadFadeAnimation.</returns>
        </member>
        <member name="T:Telerik.Core.RadScaleAndMoveAnimation">
            <summary>
            Represents pre-defined animation group that moves and scales an element.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleAndMoveAnimation.#ctor">
            <summary>
            Initializes a new instance of the RadScaleAndMoveAnimation class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAndMoveAnimation.ScaleAnimation">
            <summary>
            Gets the scale animation in this group.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAndMoveAnimation.MoveAnimation">
            <summary>
            Gets the move animation in this group.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleAndMoveAnimation.CreateMoveAnimation">
            <summary>
            Called in the constructor to create the default move animation.
            </summary>
            <returns>Returns a new instance of RadMoveAnimation.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleAndMoveAnimation.CreateScaleAnimation">
            <summary>
            Called in the constructor to create the default scale animation.
            </summary>
            <returns>Returns a new instance of RadScaleAnimation.</returns>
        </member>
        <member name="T:Telerik.Core.RadScaleAnimation">
            <summary>
            Scale animation for showing/hiding elements.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadScaleAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.Duration">
            <summary>
            Gets or sets the duration of the scale animation. The value of
            this property will be set as the value of DurationX and DurationY.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.AnimationOrigin">
            <summary>
            Gets or sets the render transform origin of the animated element.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.DurationX">
            <summary>
            Gets or sets the duration of the X animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.DurationY">
            <summary>
            Gets or sets the duration of the Y animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.StartScaleX">
            <summary>
            Gets or sets the start scale on the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.EndScaleX">
            <summary>
            Gets or sets the end scale on the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.StartScaleY">
            <summary>
            Gets or sets the start scale on the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleAnimation.EndScaleY">
            <summary>
            Gets or sets the end scale on the Y axis.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadScaleMoveAndFadeAnimation">
            <summary>
            Provides a pre-defined move, scale and fade animation.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndFadeAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadScaleMoveAndFadeAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleMoveAndFadeAnimation.ScaleAnimation">
            <summary>
            Gets the scale animation in this group.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleMoveAndFadeAnimation.MoveAnimation">
            <summary>
            Gets the move animation in this group.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleMoveAndFadeAnimation.FadeAnimation">
            <summary>
            Gets the fade animation in this group.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndFadeAnimation.CreateMoveAnimation">
            <summary>
            Called in the constructor to create the default move animation.
            </summary>
            <returns>Returns a new instance of RadMoveAnimation.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndFadeAnimation.CreateScaleAnimation">
            <summary>
            Called in the constructor to create the default scale animation.
            </summary>
            <returns>Returns a new instance of RadScaleAnimation.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndFadeAnimation.CreateFadeAnimation">
            <summary>
            Called in the constructor to create the default fade animation.
            </summary>
            <returns>Returns a new instance of RadFadeAnimation.</returns>
        </member>
        <member name="T:Telerik.Core.RadScaleMoveAndRotateAnimation">
            <summary>
            Provides a pre-defined move, scale and rotate animation.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndRotateAnimation.#ctor">
            <summary>
            Initializes a new instance of the RadScaleMoveAndRotateAnimation class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleMoveAndRotateAnimation.ScaleAnimation">
            <summary>
            Gets the scale animation for this group.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleMoveAndRotateAnimation.MoveAnimation">
            <summary>
            Gets the move animation for this group.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleMoveAndRotateAnimation.RotateAnimation">
            <summary>
            Gets the rotate animation for this group.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndRotateAnimation.CreateScaleAnimation">
            <summary>
            Called in the constructor to create the default scale animation.
            </summary>
            <returns>Returns a new instance of RadScaleAnimation.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndRotateAnimation.CreateMoveAnimation">
            <summary>
            Called in the constructor to create the default move animation.
            </summary>
            <returns>Returns a new instance of RadMoveAnimation.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleMoveAndRotateAnimation.CreateRotateAnimation">
            <summary>
            Called in the constructor to create the default rotate animation.
            </summary>
            <returns>Returns a new instance of RadPerspectiveAnimation.</returns>
        </member>
        <member name="T:Telerik.Core.RadScaleXAnimation">
            <summary>
            This animation animates an element only on its X axis.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleXAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadScaleXAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleXAnimation.StartScaleX">
            <summary>
            Gets or sets the start scale on the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleXAnimation.EndScaleX">
            <summary>
            Gets or sets the end scale on the X axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleXAnimation.ScaleY">
            <summary>
            Gets or sets a scale factor for Y property of the scale transform.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleXAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadScaleXAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleXAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <summary>
            Sets the initial animation values to the provided target element.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleXAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadScaleXAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadScaleYAnimation">
            <summary>
            This animation animates an element only on its Y axis.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleYAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadScaleYAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleYAnimation.StartScaleY">
            <summary>
            Gets or sets the start scale on the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleYAnimation.EndScaleY">
            <summary>
            Gets or sets the end scale on the Y axis.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadScaleYAnimation.ScaleX">
            <summary>
            Gets or sets a scale factor for X property of the scale transform.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleYAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadScaleYAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadScaleYAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <summary>
            Sets the initial animation values to the provided target element.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadScaleYAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadScaleYAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.RadSlideAnimation">
            <summary>
            Slides the target element from a start point to an end point.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadSlideAnimation.#ctor">
            <summary>
            Initializes a new instance of the RadSlideAnimation class.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadSlideAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadSlideAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">An AnimationContext that provides internal animation information.</param>
        </member>
        <member name="T:Telerik.Core.RadSlideContinuumAnimation">
            <summary>
            Provides an animation exact copy of the Windows Phone list based transition.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadSlideContinuumAnimation.HeaderElementProperty">
            <summary>
            Identifies the HeaderElement property.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadSlideContinuumAnimation.ApplicationHeaderElementProperty">
            <summary>
            Identifies the ApplicationHeaderElement property.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadSlideContinuumAnimation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadSlideContinuumAnimation.InOutAnimationMode">
            <summary>
            Gets or sets the in out animation mode.
            </summary>
            <value>The in out animation mode.</value>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.GetHeaderElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the PageHeader dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.SetPageHeader(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the PageHeader dependency property on an object.
            </summary>
            <param name="source">The object to set the property on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.GetApplicationHeaderElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the ApplicationHeaderElement dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.SetApplicationHeaderElement(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the ApplicationHeaderElement dependency property on an object.
            </summary>
            <param name="source">The object to set the property on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.OnStarted(Telerik.Core.PlayAnimationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Core.RadSlideContinuumAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="T:Telerik.Core.Easings">
            <summary>
            Helper class, used for creating animations in code.
            </summary>
        </member>
        <member name="T:Telerik.Core.IInOutAnimation">
            <summary>
            Specifies that an animation has in and out modes.
            For example an animation can be different depending whether
            the user is navigating to some page or from some page. The new
            page is animated with an "in" animation while the old page
            is animated with an "out" animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.IInOutAnimation.InOutAnimationMode">
            <summary>
            Gets or sets a value which indicates if an animation supports in and out modes.
            </summary>
        </member>
        <member name="T:Telerik.Core.InOutAnimationMode">
            <summary>
            Specifies the direction of the animation.
            </summary>
        </member>
        <member name="F:Telerik.Core.InOutAnimationMode.In">
            <summary>
            The animation animates an element that appears.
            </summary>
        </member>
        <member name="F:Telerik.Core.InOutAnimationMode.Out">
            <summary>
            The animation animates an element that disappears.
            </summary>
        </member>
        <member name="T:Telerik.Core.PlayAnimationInfo">
            <summary>
            Encapsulates information for an RadAnimationManager.Play pass.
            </summary>
        </member>
        <member name="M:Telerik.Core.PlayAnimationInfo.#ctor(Windows.UI.Xaml.Media.Animation.Storyboard,Telerik.Core.RadAnimation,Windows.UI.Xaml.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.PlayAnimationInfo"/> class.
            </summary>
            <param name="storyboard">The storyboard.</param>
            <param name="animation">The animation.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Telerik.Core.PlayAnimationInfo.Storyboard">
            <summary>
            Gets the <see cref="P:Telerik.Core.PlayAnimationInfo.Storyboard"/> instance associated with this play pass.
            </summary>
        </member>
        <member name="P:Telerik.Core.PlayAnimationInfo.Animation">
            <summary>
            Gets the <see cref="T:Telerik.Core.RadAnimation"/> instance associated with this play pass.
            </summary>
        </member>
        <member name="P:Telerik.Core.PlayAnimationInfo.Target">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.FrameworkElement"/> instance associated with this play pass.
            </summary>
        </member>
        <member name="P:Telerik.Core.PlayAnimationInfo.TargetHashCode">
            <summary>
            Gets the hash code of the animation target.
            </summary>
            <remarks>
            Since the target is a weak reference it can be garbage collected before we
            get its hash code for resource cleanup. See AnimationManager.RemoveAnimationInfo().
            </remarks>
        </member>
        <member name="M:Telerik.Core.PlayAnimationInfo.GetAnimatedValues(Telerik.Core.RadAnimation)">
            <summary>
            Gets previously stored array of values for the specified animation.
            </summary>
            <param name="targetAnimation">The animation which values are to be retrieved.</param>
            <returns>An array of values, stored by the specified animation.</returns>
        </member>
        <member name="M:Telerik.Core.PlayAnimationInfo.SetAnimatedValues(Telerik.Core.RadAnimation,System.Object[])">
            <summary>
            Records an array of values for the specified animation.
            </summary>
            <param name="targetAnimation">The animation which provides the values.</param>
            <param name="values">The values to be stored.</param>
        </member>
        <member name="T:Telerik.Core.RadAnimation">
            <summary>
            Base class for dynamic control animations.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadAnimation.Empty">
            <summary>
            The Empty animation does nothing and must be used instead of null if no animation should be played.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadAnimation"/> class.
            </summary>
        </member>
        <member name="E:Telerik.Core.RadAnimation.Ended">
            <summary>
            Occurs when animation has stopped running.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.Easing">
            <summary>
            Gets or sets a value describing the easing function to be used for the animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.Duration">
            <summary>
            Gets or sets the duration of the animation. Defaults to (0:0:.4) - 400 milliseconds.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.InitialDelay">
            <summary>
            Gets or sets an initial delay that will be applied before the animation starts.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.AnimationName">
            <summary>
            Gets or sets the name of the animation.
            </summary>
            <remarks>
                   <para>
                       This property is used by the NamedAnimationSelector to identify the
                       correct animation to return.
                   </para>
                   <para>
                       It is not used outside the NamedAnimationSelector.
                   </para>
            </remarks>
        </member>
        <member name="P:Telerik.Core.RadAnimation.FillBehavior">
            <summary>
            Gets or sets the FillBehavior property of the internally created storyboard, associated with this animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.SpeedRatio">
            <summary>
            Gets or sets the value for the SpeedRatio of the Storyboard generated by this animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.AutoReverse">
            <summary>
            Gets or sets the AutoReverse property of the internally created storyboard associated with this animation.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.RepeatBehavior">
            <summary>
            Gets or sets the repeat behavior of this RadAnimation instance.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.AnimationOrigin">
            <summary>
            Gets or sets the render transform origin of the animated element.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadAnimation.Parent">
            <summary>
            Gets or sets the parent group that owns this animation.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadAnimation.Clone">
            <summary>
            Creates a clone animation of this instance.
            </summary>
            <returns>Returns a clone animation of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimation.ApplyInitialValues(Windows.UI.Xaml.UIElement)">
            <summary>
            Sets the initial animation values to the provided target element.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.ClearAnimation(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes any property modifications, applied to the specified element by this instance.
            </summary>
            <param name="target">The element which property values are to be cleared.</param>
            <remarks>
            It is assumed that the element has been previously animated by this animation.
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadAnimation.CreateOpposite">
            <summary>
            Creates a new instance of this animation that is the reverse of this instance.
            </summary>
            <returns>A new instance of this animation that is the reverse of this instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimation.UpdateAnimation(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.Media.Animation.Storyboard,System.Object[])">
            <summary>
                   When overridden in a derived class this method updates the animation
                   before it is played.
            </summary>
            <param name="target">The control for which the animation needs to be updated.</param>
            <param name="storyboard">Storyboard that needs to be updated.</param>
            <param name="args">A set of arguments used for animation creation.</param>
            <remarks>
                   <para>
                       Currently the method sets the <see cref="P:Telerik.Core.RadAnimation.SpeedRatio"/> of the storyboard to
                       the global <strong>AnimationSpeedRatio</strong> if the local <see cref="P:Telerik.Core.RadAnimation.SpeedRatio"/> is null.
                       If the local <see cref="P:Telerik.Core.RadAnimation.SpeedRatio"/> value is set, it will be used.
                   </para>
            </remarks>
        </member>
        <member name="M:Telerik.Core.RadAnimation.OnStopping(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Called by the animation manager before an associated storyboard is stopped.
            Allows inheritors to store any animated values to be restored later, when the storyboard is already stopped.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.OnStopped(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Called by the animation manager after an associated storyboard has been stopped.
            Allows inheritors to apply previously stored (if any) animated values.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.ApplyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Applies already stored (if any) animated values.
            </summary>
            <param name="info">The animation info.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.OnStarted(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Called by the animation manager when the storyboard has been started.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.CreateStoryboardOverride(Windows.UI.Xaml.UIElement)">
            <summary>
            Creates a storyboard for this animation.
            </summary>
            <param name="target">The target which the storyboard will animate.</param>
            <returns>Returns a new storyboard instance.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimation.CloneCore">
            <summary>
            Creates a clone animation of this instance.
            </summary>
            <returns>Returns a clone of this animation.</returns>
        </member>
        <member name="M:Telerik.Core.RadAnimation.CopyAnimationValues(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Allows inheritors to store the animated values.
            This is useful if the animation wants to keep the final values upon storyboard stopping.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.UpdateAnimationOverride(Telerik.Core.AnimationContext)">
            <summary>
            Core update routine.
            </summary>
            <param name="context">The context that holds information about the animation.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.OnEnded(Telerik.Core.PlayAnimationInfo)">
            <summary>
            Fires the <see cref="E:Telerik.Core.RadAnimation.Ended" /> event for the specific target provided
            in the <see cref="T:Telerik.Core.PlayAnimationInfo" /> object.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Core.RadAnimation.OnEnded">
            <summary>
            Raises the <see cref="E:Telerik.Core.RadAnimation.Ended"/> event.
            </summary>
        </member>
        <member name="T:Telerik.Core.SequentialMode">
            <summary>
            Specifies the direction of the animation.
            </summary>
        </member>
        <member name="F:Telerik.Core.SequentialMode.LastToFirst">
            <summary>
            The sequential animation starts from the last item and ends with the first item.
            </summary>
        </member>
        <member name="F:Telerik.Core.SequentialMode.FirstToLast">
            <summary>
            The sequential animation starts from the first item and ends with the last item.
            </summary>
        </member>
        <member name="T:Telerik.Core.AppointmentSource">
            <summary>
            Defines basic logic for retrieving a collection of IAppointment objects.
            </summary>
        </member>
        <member name="P:Telerik.Core.AppointmentSource.AllAppointments">
            <summary>
            Gets a list of all the appointments from the real data source wrapped in IAppointment objects.
            </summary>
        </member>
        <member name="M:Telerik.Core.AppointmentSource.GetAppointments(System.Func{Telerik.Core.IAppointment,System.Boolean})">
            <summary>
            Creates a collection of IAppointment objects based on an appointment predicate.
            </summary>
            <param name="appointmentFilter">A predicate that determines which appointments will be present in the resulting collection.</param>
            <returns>Returns a collection of IAppointment objects.</returns>
            <remarks>
            Inheritors must populate the AllAppointments list, otherwise this method will always return an empty collection.
            </remarks>
        </member>
        <member name="M:Telerik.Core.AppointmentSource.FetchData(System.DateTime,System.DateTime)">
            <summary>
            An abstract method that inheritors must implement in order to
            fetch new appointments from the native appointment source.
            </summary>
            <param name="startDate">The start date for the new appointments.</param>
            <param name="endDate">The end date for the new appointments.</param>
            <returns>Appointments data.</returns>
        </member>
        <member name="T:Telerik.Core.DateTimeAppointment">
            <summary>
            A base Appointment class that implements IAppointment.
            </summary>
        </member>
        <member name="M:Telerik.Core.DateTimeAppointment.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the DateTimeAppointment class.
            </summary>
            <param name="start">The start date of the appointment.</param>
            <param name="end">The end date of the appointment.</param>
        </member>
        <member name="M:Telerik.Core.DateTimeAppointment.#ctor(System.DateTime,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the DateTimeAppointment class.
            </summary>
            <param name="start">The start date of the appointment.</param>
            <param name="end">The end date of the appointment.</param>
            <param name="description">The appointment description.</param>
        </member>
        <member name="P:Telerik.Core.DateTimeAppointment.StartDate">
            <summary>
            Gets the start date of this appointment.
            </summary>
        </member>
        <member name="P:Telerik.Core.DateTimeAppointment.EndDate">
            <summary>
            Gets the end date of this appointment.
            </summary>
        </member>
        <member name="P:Telerik.Core.DateTimeAppointment.Description">
            <summary>
            Gets the description of this appointment.
            </summary>
        </member>
        <member name="P:Telerik.Core.DateTimeAppointment.Subject">
            <summary>
            Gets or sets the description of this appointment.
            </summary>
        </member>
        <member name="T:Telerik.Core.IAppointment">
            <summary>
            An interface that defines the minimum properties that an appointment can have.
            </summary>
        </member>
        <member name="P:Telerik.Core.IAppointment.StartDate">
            <summary>
            Gets the start date of the appointment.
            </summary>
        </member>
        <member name="P:Telerik.Core.IAppointment.EndDate">
            <summary>
            Gets the end date of the appointment.
            </summary>
        </member>
        <member name="P:Telerik.Core.IAppointment.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Telerik.Core.BindingExpressionHelper">
            <summary>
            Provides methods that allow getting property values without reflection.
            </summary>
        </member>
        <member name="M:Telerik.Core.BindingExpressionHelper.ToUntypedFunc``2(System.Func{``0,``1})">
            <summary>
            Converts typed to untyped function.
            </summary>
            <typeparam name="T">The input parameter type of the function.</typeparam>
            <typeparam name="TResult">Return type of the function.</typeparam>
            <param name="func">That that will be converted.</param>
        </member>
        <member name="M:Telerik.Core.BindingExpressionHelper.CreateGetValueFunc(System.Type,System.String)">
            <summary>
            Returns a function that will return the value of the property, specified by the provided propertyPath.
            </summary>
            <param name="itemType">The type of the instance which property will be returned.</param>
            <param name="propertyPath">The path of the property which value will be returned.</param>
        </member>
        <member name="T:Telerik.Core.CommandBase">
            <summary>
            Base implementation of the <see cref="T:System.Windows.Input.ICommand"/> interface.
            </summary>
        </member>
        <member name="E:Telerik.Core.CommandBase.CanExecuteChanged">
            <summary>
            Occurs when the CanExecute state of the command changes.
            </summary>
        </member>
        <member name="M:Telerik.Core.CommandBase.CanExecute(System.Object)">
            <summary>
            Determines whether the command can be executed against the provided parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>A value that indicates whether the command can be executed.</returns>
        </member>
        <member name="M:Telerik.Core.CommandBase.Execute(System.Object)">
            <summary>
            Performs the core action associated with the command, using the provided parameter.
            </summary>
            <param name="parameter">The command parameter.</param>
        </member>
        <member name="M:Telerik.Core.CommandBase.ExecuteCore(System.Object)">
            <summary>
            Performs the core action associated with this command.
            </summary>
            <param name="parameter">The command parameter.</param>
        </member>
        <member name="M:Telerik.Core.CommandBase.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:CanExecuteChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Telerik.Core.Data.BitStateChangedEventArgs">
            <summary>
            Encapsulates the data, associated with a change in the bit state of a <see cref="T:Telerik.Core.DisposableObject"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.BitStateChangedEventArgs.#ctor(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Data.BitStateChangedEventArgs"/> class.
            </summary>
            <param name="key">The key that defines the changed bit.</param>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Telerik.Core.Data.BitStateChangedEventArgs.Key">
            <summary>
            Gets the key that defines the changed bit.
            </summary>
        </member>
        <member name="P:Telerik.Core.Data.BitStateChangedEventArgs.OldValue">
            <summary>
            Gets the previous value.
            </summary>
        </member>
        <member name="P:Telerik.Core.Data.BitStateChangedEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Telerik.Core.Data.BitVector32">
            <summary>
            A simple structure that uses the bits of a <see cref="T:System.UInt32"/> structure to define boolean values.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.BitVector32.#ctor(Telerik.Core.Data.BitVector32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Data.BitVector32"/> struct using the raw data specified by the provided source vector.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Telerik.Core.Data.BitVector32.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Data.BitVector32"/> struct.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Telerik.Core.Data.BitVector32.Data">
            <summary>
            Gets the <see cref="T:UInt32"/> structure holding the separate bits of the vector.
            </summary>
        </member>
        <member name="P:Telerik.Core.Data.BitVector32.Item(System.UInt32)">
            <summary>
            Determines whether the bit, corresponding to the specified key is set.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.BitVector32.op_Equality(Telerik.Core.Data.BitVector32,Telerik.Core.Data.BitVector32)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Telerik.Core.Data.BitVector32.op_Inequality(Telerik.Core.Data.BitVector32,Telerik.Core.Data.BitVector32)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Telerik.Core.Data.BitVector32.Reset">
            <summary>
            Clears all currently set bits in this vector.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.BitVector32.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Core.Data.BitVector32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Telerik.Core.Data.ItemPropertyChangedEventArgs">
            <summary>
            Encapsulates the data, associated with a single item property change within the source collection.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.ItemPropertyChangedEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Data.ItemPropertyChangedEventArgs"/> class.
            </summary>
            <param name="item">The item which property has changed.</param>
            <param name="propName">The name of the property.</param>
        </member>
        <member name="P:Telerik.Core.Data.ItemPropertyChangedEventArgs.Item">
            <summary>
            Gets the raw data item instance which property has changed.
            </summary>
        </member>
        <member name="T:Telerik.Core.Data.NotifyCurrentItemChangedEventArgs">
            <summary>
            Provides data for the CurrentItemChanged event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Telerik.Core.Data.NotifyCurrentItemChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Data.NotifyCurrentItemChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Core.Data.PropertyValueLookup">
            <summary>
            Represents a concrete <see cref="T:Telerik.Core.Data.ValueLookup"/> implementation that retrieves property value given the name of the property.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.PropertyValueLookup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Data.PropertyValueLookup"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.PropertyValueLookup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Data.PropertyValueLookup"/> class.
            </summary>
            <param name="propertyName">The name of the property which value is bound.</param>
        </member>
        <member name="P:Telerik.Core.Data.PropertyValueLookup.PropertyName">
            <summary>
            Gets or sets the name of the property which value is bound.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.PropertyValueLookup.GetValueForItem(System.Object)">
            <summary>
            Retrieves the value for the specified object instance.
            </summary>
        </member>
        <member name="T:Telerik.Core.Data.ValueLookup">
            <summary>
            Defines a public method that can be used for looking-up values on an object instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.Data.ValueLookup.GetValueForItem(System.Object)">
            <summary>
            Retrieves the desired value from the specified object instance.
            </summary>
            <param name="dataItem">The object instance from which the value is retrieved.</param>
            <returns>The actual value.</returns>
        </member>
        <member name="T:Telerik.Core.DeviceType">
            <summary>
            Device type.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.Phone">
            <summary>
            Phone.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.Desktop">
            <summary>
            Desktop.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.Tablet">
            <summary>
            Tablet.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.IoT">
            <summary>
            IOT.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.Xbox">
            <summary>
            Xbox.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.SurfaceHub">
            <summary>
            SurfaceHub.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.Continuum">
            <summary>
            Continuum.
            </summary>
        </member>
        <member name="F:Telerik.Core.DeviceType.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="T:Telerik.Core.DeviceTypeHelper">
            <summary>
            Helper class to get device type.
            </summary>
        </member>
        <member name="M:Telerik.Core.DeviceTypeHelper.GetDeviceType">
            <summary>
            Get the device type (XBox, Continuum, Tablet, Desktop, IoT...).
            </summary>
        </member>
        <member name="T:Telerik.Core.DisposableObject">
            <summary>
            Represents an object that implements the <see cref="T:System.IDisposable"/> interface and automatically releases any events, attached to this instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.DisposableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.DisposableObject"/> class.
            </summary>
        </member>
        <member name="E:Telerik.Core.DisposableObject.Disposing">
            <summary>
            Raised when the object enters its Dispose routine.
            </summary>
        </member>
        <member name="E:Telerik.Core.DisposableObject.Disposed">
            <summary>
            Raised when the object has finished its Dispose routine.
            </summary>
        </member>
        <member name="P:Telerik.Core.DisposableObject.IsDisposing">
            <summary>
            Gets a value indicating whether the object is currently in a Dispose cycle.
            </summary>
        </member>
        <member name="P:Telerik.Core.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether the object is already disposed.
            </summary>
        </member>
        <member name="P:Telerik.Core.DisposableObject.Item(System.UInt32)">
            <summary>
            Directly gets or sets the bit, determined by the specified key.
            Use the SetBitState method to receive a Changed notification as appropriate.
            </summary>
        </member>
        <member name="M:Telerik.Core.DisposableObject.Dispose">
            <summary>
            Releases all resources, used by this instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.DisposableObject.SetBitState(System.UInt32,System.Boolean)">
            <summary>
            Updates the specified bit, determined by the supplied key, depending on the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Core.DisposableObject.OnBitStateChanged(Telerik.Core.Data.BitStateChangedEventArgs)">
            <summary>
            Notifies for a change in the current bit state of this instance.
            </summary>
            <param name="e">The arguments, associated with the event.</param>
        </member>
        <member name="M:Telerik.Core.DisposableObject.DisposeManagedResources">
            <summary>
            Disposes all managed resources allocated by this instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.DisposableObject.CollectEvents(System.Collections.Generic.List{System.Delegate})">
            <summary>
            Gets all the events, exposed by this instance. Used to clean-up event subscriptions upon disposal.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Telerik.Core.DisposableObject.DisposeUnmanagedResources">
            <summary>
            Override this method if any unmanaged resources such as file handles are allocated.
            </summary>
        </member>
        <member name="T:Telerik.Core.ElementTreeHelper">
            <summary>
            Exposes helper methods for searching and traversing visual trees.
            </summary>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.FindVisualAncestor``1(Windows.UI.Xaml.DependencyObject,System.Predicate{Windows.UI.Xaml.DependencyObject})">
            <summary>
            Finds a visual ancestor from a given type and based on a given
            condition that is in the parent chain of a given child element.
            </summary>
            <typeparam name="T">The type of the element to look for.</typeparam>
            <param name="child">The child.</param>
            <param name="condition">The condition.</param>
            <returns>An instance of the given type if found, otherwise null.</returns>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.FindLastVisualAncestor``1(Windows.UI.Xaml.DependencyObject,System.Predicate{Windows.UI.Xaml.DependencyObject})">
            <summary>
            Finds the last visual ancestor of the provided type.
            </summary>
            <typeparam name="T">The type of the ancestor to search for.</typeparam>
            <param name="child">The from which to start the search.</param>
            <param name="condition">A condition to test each ancestor of the T type.</param>
            <returns>The last ancestor of the specified T type which matches the condition.</returns>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.FindVisualDescendant``1(Windows.UI.Xaml.DependencyObject,System.Predicate{Windows.UI.Xaml.DependencyObject})">
            <summary>
            Finds a visual descendant from a given type and based on a given
            condition that is in the hierarchy of a given parent element.
            </summary>
            <typeparam name="T">The type of the element to look for.</typeparam>
            <param name="parent">The parent.</param>
            <param name="condition">The condition.</param>
            <returns>An instance of the given type if found, otherwise null.</returns>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.EnumVisualDescendants(Windows.UI.Xaml.DependencyObject,System.Predicate{Windows.UI.Xaml.DependencyObject},Telerik.Core.TreeTraversalMode)">
            <summary>
            Returns a lazily evaluated iterator that allows linear iteration
            over a tree of DependencyObjects.
            </summary>
            <param name="parent">The root element of the tree to iterate over.</param>
            <param name="condition">A predicate to filter what elements are returned.</param>
            <param name="mode">The tree traversal mode of the iteration algorithm.</param>
            <returns>
            A lazily evaluated iterator that allows linear iteration
            over a tree of DependencyObjects.
            </returns>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.IsElementRendered(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Determines whether the specified element is rendered on the visual tree.
            </summary>       
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.SafeTransformPoint(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Point)">
            <summary>
            Transforms the specified point using the TransformToVisual routine while checking for valid transform conditions - e.g. elements are both loaded and rendered.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="point">The transform point.</param>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.SafeTransformBounds(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Rect)">
            <summary>
            Transforms the specified rect using the TransformToVisual routine while checking for valid transform conditions - e.g. elements are both loaded and rendered.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.IsParentChainHitTestVisible(Windows.UI.Xaml.UIElement)">
            <summary>
            Determines whether all the ancestors of the specified <see cref="T:Windows.UI.Xaml.UIElement"/> instance are hit-test visible.
            </summary>
            <param name="element">The element to start from.</param>
            <returns>True if all the ancestors are hit-test visible, false otherwise.</returns>
        </member>
        <member name="M:Telerik.Core.ElementTreeHelper.TransformRectForFlowDirection(Windows.Foundation.Rect,Windows.UI.Xaml.FlowDirection)">
            <summary>
            Transforms a rectangle according to the provided float direction. Since a <see cref="T:Rect"/>
            struct has its origin always at the top left point, to make a <see cref="T:Rect"/> usable
            in a RightToLeft scenario we need to offset its X coordinate with its width.
            </summary>
            <param name="source">The source rectangle to transform.</param>
            <param name="direction">The flow direction to transform against.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="T:Telerik.Core.HslColor">
            <summary>
            Converts colors from RGB to HSL and vice versa.
            </summary>
        </member>
        <member name="M:Telerik.Core.HslColor.Parse(System.Int32)">
            <summary>
            Creates a HSLColor based on an integer containing color information in the rgba format.
            </summary>
            <param name="rgba">The color in rgba.</param>
            <returns>Returns a new instance of HslColor.</returns>
        </member>
        <member name="M:Telerik.Core.HslColor.Parse(Windows.UI.Color)">
            <summary>
            Creates a HSLColor based on an integer containing color information in the rgba format.
            </summary>
            <param name="color">The color in rgba.</param>
            <returns>Returns a new instance of HslColor.</returns>
        </member>
        <member name="M:Telerik.Core.HslColor.Parse(System.Byte[])">
            <summary>
            Creates a HSLColor based on byte array containing color information in the rgba format.
            </summary>
            <param name="rgba">The color in rgba.</param>
            <returns>Returns a new instance of HslColor.</returns>
        </member>
        <member name="M:Telerik.Core.HslColor.ToInt">
            <summary>
            Converts this HslColor instance to <see cref="T:System.Int32"/> in the rgba format.
            </summary>
            <returns>Returns an integer.</returns>
        </member>
        <member name="M:Telerik.Core.HslColor.ToColor">
            <summary>
            Converts this HslColor to Color.
            </summary>
            <returns>Returns a color object.</returns>
        </member>
        <member name="M:Telerik.Core.HslColor.ToRGB">
            <summary>
            Converts this HslColor instance to a byte array in the rgba format.
            </summary>
            <returns>An byte array.</returns>
        </member>
        <member name="T:Telerik.Core.IAsyncDataErrorInfo">
            <summary>
            Defines members that data entity classes can implement to provide custom
            synchronous and asynchronous validation support. Extends <see cref="T:System.ComponentModel.INotifyDataErrorInfo"/> and adds an option for synchronous execution of async validation.
            </summary>
        </member>
        <member name="M:Telerik.Core.IAsyncDataErrorInfo.ValidateAsync(System.String)">
            <summary>
            Triggers validate logic asynchronously.
            </summary>
            <param name="propertyName">The name of the property that needs validation.</param>
        </member>
        <member name="T:Telerik.Core.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value as an existing instance.
            </summary>
            <typeparam name="T">The concrete type of the clone instance.</typeparam>
        </member>
        <member name="M:Telerik.Core.ICloneable`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="T:Telerik.Core.Pair`2">
            <summary>
            A utility class that holds a pair of objects of arbitrary types.
            </summary>
        </member>
        <member name="M:Telerik.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Pair class.
            </summary>
            <param name="first">The object for First.</param>
            <param name="second">The object for Second.</param>
        </member>
        <member name="P:Telerik.Core.Pair`2.First">
            <summary>
            Gets or sets the first object.
            </summary>
        </member>
        <member name="P:Telerik.Core.Pair`2.Second">
            <summary>
            Gets or sets the second object.
            </summary>
        </member>
        <member name="T:Telerik.Core.SuspendableObject">
            <summary>
            Represents the abstract definition of an object which may be suspended. That is to prevent it from preforming certain functionality until resumed.
            </summary>
        </member>
        <member name="P:Telerik.Core.SuspendableObject.IsSuspended">
            <summary>
            Gets a value indicating whether this instance is currently suspended.
            </summary>
        </member>
        <member name="M:Telerik.Core.SuspendableObject.Suspend">
            <summary>
            Temporarily suspends this instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.SuspendableObject.Resume">
            <summary>
            Resumes this instance (allows certain functionality to be performed).
            </summary>
        </member>
        <member name="M:Telerik.Core.SuspendableObject.Resume(System.Boolean)">
            <summary>
            Resumes this instance (allows certain functionality to be performed).
            </summary>
            <param name="update">True to perform update after resuming.</param>
        </member>
        <member name="M:Telerik.Core.SuspendableObject.SuspendOverride">
            <summary>
            Allows inheritors to perform additional logic upon suspend.
            </summary>
        </member>
        <member name="M:Telerik.Core.SuspendableObject.OnResumed(System.Boolean)">
            <summary>
            Notifies that this instance is no longer suspended.
            Allows inheritors to provide their own update logic.
            </summary>
            <param name="update">True if an Update is requested, false otherwise.</param>
        </member>
        <member name="T:Telerik.Core.ValidateViewModelBase">
            <summary>
            Provides basic implementation of the <see cref="T:Telerik.Core.IAsyncDataErrorInfo"/> interface.
            </summary>
        </member>
        <member name="E:Telerik.Core.ValidateViewModelBase.ErrorsChanged">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Core.ValidateViewModelBase.HasErrors">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Core.ValidateViewModelBase.GetErrors(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Core.ValidateViewModelBase.ValidateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Core.ValidateViewModelBase.RemoveErrors(System.String)">
            <summary>
            Removes the errors for the specified property.
            </summary>
            <param name="propertyName">The name of the property to remove validation errors
            for; or null or <see cref="F:System.String.Empty"/>, to clear entity-level
            errors.</param>
        </member>
        <member name="M:Telerik.Core.ValidateViewModelBase.AddError(System.String,System.Object)">
            <summary>
            Adds error message to the specified property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Telerik.Core.ValidateViewModelBase.ValidateAsyncOverride(System.String)">
            <summary>
            Called by the <see cref="M:ValidateAsync"/> method. Allows inheritors to provide custom validation logic.
            </summary>
            <param name="propertyName">The name of the property that needs validation.</param>
        </member>
        <member name="M:Telerik.Core.ValidateViewModelBase.OnErrorsChanged(System.String)">
            <summary>
            Raises the <see cref="E:Telerik.Core.ValidateViewModelBase.ErrorsChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Telerik.Core.ViewModelBase">
            <summary>
            Base implementation of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="E:Telerik.Core.ViewModelBase.PropertyChanged">
            <summary>
            Occurs immediately after a property of this instance has changed.
            </summary>
        </member>
        <member name="M:Telerik.Core.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Telerik.Core.ViewModelBase.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Core.ViewModelBase.PropertyChangedOverride(System.String)">
            <summary>
            Provides an entry point for inheritors to provide additional logic over the PropertyChanged routine.
            </summary>
        </member>
        <member name="T:Telerik.Core.BoolToVisibilityConverter">
            <summary>
            Converts boolean values to <see cref="T:Windows.UI.Xaml.Visibility"/>.
            </summary>
        </member>
        <member name="M:Telerik.Core.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the source data before passing it to the target for display
            in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by
            the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Telerik.Core.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the target data before passing it to the source object.  This
            method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" />
            bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by
            the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
        </member>
        <member name="T:Telerik.Core.IFormatSelector">
            <summary>
            Interface which allows to select a specific string format based on the provided value.
            </summary>
        </member>
        <member name="M:Telerik.Core.IFormatSelector.GetFormat(System.Object)">
            <summary>
            Gets a string format.
            </summary>
            <param name="value">The value which will be formatted.</param>
        </member>
        <member name="T:Telerik.Core.StringToUpperConverter">
            <summary>
            Uses the <see cref="M:String.ToUpper"/> method to convert a string to upper case.
            </summary>
        </member>
        <member name="M:Telerik.Core.StringToUpperConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts the specified value to upper case using the <see cref="M:String.ToUpper"/> method.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:Telerik.Core.StringToUpperConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Not implemented.
            </summary> 
        </member>
        <member name="T:Telerik.Core.DynamicHelper">
            <summary>
            Encapsulates helper methods to generate Dynamic methods using System.Reflection.Emit.
            </summary>
        </member>
        <member name="M:Telerik.Core.DynamicHelper.CreatePropertyValueGetter(System.Type,System.String)">
            <summary>
            Generates a untyped function to allow retrieving property values for instances of the specified type without using reflection.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Telerik.Core.Element">
            <summary>
            Base class for nodes that may have children.
            </summary>
        </member>
        <member name="M:Telerik.Core.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Element"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Core.Element.Presenter">
            <summary>
            Gets the <see cref="T:Telerik.Core.IElementPresenter"/> instance where this element is presented.
            </summary>
        </member>
        <member name="M:Telerik.Core.Element.FindAncestor``1">
            <summary>
            Searches up the parent chain and returns the first parent of type T.
            </summary>
            <typeparam name="T">Must be a <see cref="T:Telerik.Core.Element"/>.</typeparam>
        </member>
        <member name="M:Telerik.Core.Element.IsAncestorOf(Telerik.Core.Node)">
            <summary>
            Gets a boolean value that determines whether a given element
            resides in the element hierarchy of this element.
            </summary>
            <param name="node">An instance of the <see cref="T:Telerik.Core.Node"/>
            class which is checked.</param>
        </member>
        <member name="M:Telerik.Core.Element.FindDescendant``1">
            <summary>
            Searches down the subtree of elements, using breadth-first approach, and returns the first descendant of type T.
            </summary>
            <typeparam name="T">Must be a <see cref="T:Telerik.Core.Node"/>.</typeparam>
        </member>
        <member name="M:Telerik.Core.Element.FindDescendant(System.Predicate{Telerik.Core.Node})">
            <summary>
            Searches down the subtree of elements, using breadth-first approach, and returns the first descendant of type T.
            </summary>
        </member>
        <member name="M:Telerik.Core.Element.EnumDescendants">
            <summary>
            Provides flexible routine for traversing all descendants of this instance.
            </summary>
        </member>
        <member name="M:Telerik.Core.Element.EnumDescendants(Telerik.Core.TreeTraversalMode)">
            <summary>
            Provides flexible routine for traversing all descendants of this instance.
            </summary>
            <param name="traverseMode">The mode used to traverse the subtree.</param>
        </member>
        <member name="M:Telerik.Core.Element.EnumDescendants(System.Predicate{Telerik.Core.Node},Telerik.Core.TreeTraversalMode)">
            <summary>
            Provides flexible routine for traversing all descendants of this instance that match the provided predicate.
            </summary>
            <param name="predicate">The predicate that defines the match criteria.</param>
            <param name="traverseMode">The mode used to traverse the subtree.</param>
        </member>
        <member name="T:Telerik.Core.ElementCollection`1">
            <summary>
            Represents a typed collection of <see cref="T:Telerik.Core.Node"/> instances. For example an element instance may aggregate two or more typed collections of different nodes.
            </summary>
            <typeparam name="T">Must be a <see cref="T:Telerik.Core.Node"/>.</typeparam>
        </member>
        <member name="M:Telerik.Core.ElementCollection`1.#ctor(Telerik.Core.Element)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.ElementCollection`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:Telerik.Core.ElementCollection`1.ShouldCacheIndexes">
            <summary>
            Gets a value indicating whether the collection should cache the index of each node added.
            This will improve performance if many IndexOf calls will be performed upon this collection.
            </summary>
        </member>
        <member name="M:Telerik.Core.ElementCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Core.ElementCollection`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Telerik.Core.ElementCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:Telerik.Core.RadPropertyEventArgs">
            <summary>
            Encapsulates all the data associated with a change in a <see cref="T:Telerik.Core.PropertyBagObject"/> property store.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadPropertyEventArgs.#ctor(System.Int32,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadPropertyEventArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Telerik.Core.RadPropertyEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadPropertyEventArgs"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Telerik.Core.RadPropertyEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the property change can be accepted. Valid during the Changing pass.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPropertyEventArgs.Key">
            <summary>
            Gets the key of the property associated with the event.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPropertyEventArgs.PropertyName">
            <summary>
            Gets the name of the property that has changed. This member is not set if the property is associated with a valid key.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPropertyEventArgs.OldValue">
            <summary>
            Gets the old value of the associated property.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadPropertyEventArgs.NewValue">
            <summary>
            Gets or sets the new value of the associated property.
            </summary>
        </member>
        <member name="T:Telerik.Core.IElementPresenter">
            <summary>
            Represents an instance that may visualize a <see cref="T:Telerik.Core.Element"/> instance on the screen. Typically this interface is implemented by platform-specific types like the XAML Control class.
            </summary>
        </member>
        <member name="P:Telerik.Core.IElementPresenter.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
        </member>
        <member name="M:Telerik.Core.IElementPresenter.RefreshNode(System.Object)">
            <summary>
            Invalidates the visual representation of the specified logical node.
            </summary>
        </member>
        <member name="M:Telerik.Core.IElementPresenter.MeasureContent(System.Object,System.Object)">
            <summary>
            Retrieves the desired size of the specified logical node's content.
            </summary>
        </member>
        <member name="T:Telerik.Core.IView">
            <summary>
            Represents <see cref="T:Telerik.Core.IElementPresenter"/> instance that is the root of the visual scene.
            </summary>
        </member>
        <member name="P:Telerik.Core.IView.ViewportWidth">
            <summary>
            Gets the visible width of the viewport.
            </summary>
        </member>
        <member name="P:Telerik.Core.IView.ViewportHeight">
            <summary>
            Gets the visible height of the viewport.
            </summary>
        </member>
        <member name="P:Telerik.Core.Message.Handled">
            <summary>
            Gets or sets a value indicating whether the message is handled (processed) by some receiver.
            </summary>
        </member>
        <member name="P:Telerik.Core.Message.StopDispatch">
            <summary>
            Gets or sets a value indicating whether message may continue being dispatched or not.
            </summary>
        </member>
        <member name="P:Telerik.Core.Message.DispatchPhase">
            <summary>
            Gets or sets the current phase of the dispatch process.
            </summary>
        </member>
        <member name="P:Telerik.Core.Message.DispatchMode">
            <summary>
            Gets or sets the mode which determines how this message is dispatched.
            </summary>
        </member>
        <member name="P:Telerik.Core.Message.Id">
            <summary>
            Gets the unique id for this message.
            </summary>
        </member>
        <member name="P:Telerik.Core.Message.Data">
            <summary>
            Gets or sets the raw data associated with the message.
            </summary>
        </member>
        <member name="T:Telerik.Core.MessageDispatchMode">
            <summary>
            Defines how a message should be dispatched in the element tree.
            </summary>
        </member>
        <member name="F:Telerik.Core.MessageDispatchMode.Bubble">
            <summary>
            Message is dispatched to the direct target and its ancestors.
            </summary>
        </member>
        <member name="F:Telerik.Core.MessageDispatchMode.Tunnel">
            <summary>
            Message is dispatched to the direct target all its descendants.
            </summary>
        </member>
        <member name="F:Telerik.Core.MessageDispatchMode.BubbleAndTunnel">
            <summary>
            Message is dispatched to the direct target, its ancestors and all its descendants.
            </summary>
        </member>
        <member name="T:Telerik.Core.MessageDispatchPhase">
            <summary>
            Defines the possible phases a message dispatch process may enter.
            </summary>
        </member>
        <member name="F:Telerik.Core.MessageDispatchPhase.Bubble">
            <summary>
            Message is being dispatched up in the parent chain.
            </summary>
        </member>
        <member name="F:Telerik.Core.MessageDispatchPhase.Tunnel">
            <summary>
            Message is being dispatched down to all descendants.
            </summary>
        </member>
        <member name="T:Telerik.Core.Node">
            <summary>
            Represents a node in a logical tree.
            </summary>
        </member>
        <member name="M:Telerik.Core.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.Node"/> class.
            </summary>
        </member>
        <member name="E:Telerik.Core.Node.PropertyChanged">
            <summary>
            Occurs when a property of this node has changed.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.Presenter">
            <summary>
            Gets the <see cref="T:Telerik.Core.IElementPresenter"/> instance where this node is visualized.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.IsArrangeValid">
            <summary>
            Gets a value indicating whether the node is laid-out on the chart scene.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.NodeState">
            <summary>
            Gets the current state of the node.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.Index">
            <summary>
            Gets the index of this node in its parent <see cref="T:Telerik.Core.Element"/> nodes collection.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.CollectionIndex">
            <summary>
            Gets the index of this node in its owning typed collection.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.IsTreeLoaded">
            <summary>
            Gets a value indicating whether the logical tree this node is part of is loaded.
            </summary>
            <remarks>
            This actually checks for a valid <see cref="T:Telerik.Core.RootElement"/> reference and asks whether the area itself is loaded.
            This value may differ from the current <see cref="P:Telerik.Core.Node.NodeState"/>.
            </remarks>
        </member>
        <member name="P:Telerik.Core.Node.LayoutSlot">
            <summary>
            Gets the rectangle (in physical coordinates) where this node resides.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.Parent">
            <summary>
            Gets the <see cref="T:Telerik.Core.Element"/> where this node resides.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.TrackPropertyChanging">
            <summary>
            Gets or sets a value indicating whether the node will go through the OnPropertyChanging routine when a property is about to be changed.
            </summary>
        </member>
        <member name="P:Telerik.Core.Node.TrackPropertyChanged">
            <summary>
            Gets or sets a value indicating whether the node will go through the OnPropertyChanged routine when a property has changed.
            </summary>
        </member>
        <member name="M:Telerik.Core.Node.Arrange(Telerik.Core.RadRect,System.Boolean)">
            <summary>
            Arranges the node within the specified layout slot.
            </summary>
        </member>
        <member name="M:Telerik.Core.Node.Invalidate">
            <summary>
            Delegates an "Invalidate" request to the owning <see cref="T:Telerik.Core.IElementPresenter"/> instance (if any).
            </summary>
        </member>
        <member name="M:Telerik.Core.Node.InvalidateCore">
            <summary>
            Perform the core logic behind the Invalidate routine.
            </summary>
        </member>
        <member name="M:Telerik.Core.Node.ApplyLayoutRounding">
            <summary>
            Performs pixel-snapping and corrects floating-point calculations errors.
            </summary>
        </member>
        <member name="M:Telerik.Core.Node.DispatchMessage(Telerik.Core.Message)">
            <summary>
            Dispatches the provided message to the logical tree, starting from the Sender as a leaf.
            </summary>
        </member>
        <member name="T:Telerik.Core.NodeCollection">
            <summary>
            Represents a collection of a <see cref="T:Telerik.Core.Node"/> instances.
            </summary>
        </member>
        <member name="P:Telerik.Core.NodeCollection.Owner">
            <summary>
            Gets the <see cref="T:Telerik.Core.Element"/> instance that owns this collection.
            </summary>
        </member>
        <member name="P:Telerik.Core.NodeCollection.Count">
            <summary>
            Gets the count of all the items.
            </summary>
        </member>
        <member name="M:Telerik.Core.NodeCollection.GetEnumerator">
            <summary>
            Gets the <see cref="T:System.Collections.IEnumerator"/> instance that allows for traversing all the items.
            </summary>
        </member>
        <member name="M:Telerik.Core.NodeCollection.IndexOf(Telerik.Core.Node)">
            <summary>
            Gets the index of the specified node within the collection.
            </summary>
        </member>
        <member name="M:Telerik.Core.NodeCollection.Contains(Telerik.Core.Node)">
            <summary>
            Determines whether the specified node is contained within the collection.
            </summary>
        </member>
        <member name="T:Telerik.Core.NodeState">
            <summary>
            Defines the possible states a <see cref="T:Telerik.Core.Node"/> may enter.
            </summary>
        </member>
        <member name="F:Telerik.Core.NodeState.Initial">
            <summary>
            The node is created.
            </summary>
        </member>
        <member name="F:Telerik.Core.NodeState.Loading">
            <summary>
            The node is loading on the visual scene.
            </summary>
        </member>
        <member name="F:Telerik.Core.NodeState.Loaded">
            <summary>
            The node is loaded and ready to be visualized.
            </summary>
        </member>
        <member name="F:Telerik.Core.NodeState.Unloading">
            <summary>
            The node is in a process of being unloaded from the visual scene.
            </summary>
        </member>
        <member name="F:Telerik.Core.NodeState.Unloaded">
            <summary>
            The node is detached from the visual scene.
            </summary>
        </member>
        <member name="T:Telerik.Core.PropertyBagObject">
            <summary>
            Represents an object that stores its properties within a property bag.
            </summary>
        </member>
        <member name="M:Telerik.Core.PropertyBagObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.PropertyBagObject"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Core.PropertyKeys.Register(System.Type,System.String)">
            <summary>
            Registers an integer value that uniquely identifies a property.
            </summary>
            <param name="type">The type that declares the property.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Telerik.Core.PropertyKeys.Register(System.Type,System.String,System.Object)">
            <summary>
            Registers an integer value that uniquely identifies a property.
            </summary>
            <param name="type">The type that declares the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="flags">Optional metadata, associated with the property.</param>
        </member>
        <member name="T:Telerik.Core.RootElement">
            <summary>
            Represents the root element of a logical tree. This element is usually aggregated by a <see cref="T:Telerik.Core.IView"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Core.RootElement.IsTreeLoaded">
            <summary>
            Determines whether the node is loaded.
            </summary>
        </member>
        <member name="P:Telerik.Core.RootElement.View">
            <summary>
            Gets or sets the current <see cref="T:Telerik.Core.IView"/> instance that aggregates this element.
            </summary>
        </member>
        <member name="M:Telerik.Core.RootElement.Arrange">
            <summary>
            Arranges the element using a rectangle located at (0, 0) and with Size equal to the current view's Viewport.
            </summary>
        </member>
        <member name="T:Telerik.Core.TreeTraversalMode">
            <summary>
            Defines possible approaches when traversing a tree.
            </summary>
        </member>
        <member name="F:Telerik.Core.TreeTraversalMode.DepthFirst">
            <summary>
            Depth-first traversal.
            </summary>
        </member>
        <member name="F:Telerik.Core.TreeTraversalMode.BreadthFirst">
            <summary>
            Breadth first traversal.
            </summary>
        </member>
        <member name="T:Telerik.Core.LocalizationManager">
            <summary>
            Represents a singleton class that manages application string resources.
            </summary>
        </member>
        <member name="P:Telerik.Core.LocalizationManager.GlobalResourceMap">
            <summary>
            Gets or sets the <see cref="T:Windows.ApplicationModel.Resources.Core.ResourceMap"/> instance that contains localized versions for all keys in each Telerik assembly.
            </summary>
        </member>
        <member name="P:Telerik.Core.LocalizationManager.DefaultResourceMap">
            <summary>
            Gets the <see cref="T:Windows.ApplicationModel.Resources.Core.ResourceMap"/> instance provided by the associated assembly.
            </summary>
        </member>
        <member name="P:Telerik.Core.LocalizationManager.UserResourceMap">
            <summary>
            Gets or sets the user-defined <see cref="T:Windows.ApplicationModel.Resources.Core.ResourceMap"/> instance used to look-up localizable resources within the associated assembly.
            </summary>
        </member>
        <member name="P:Telerik.Core.LocalizationManager.StringLoader">
            <summary>
            Gets or sets the <see cref="T:Telerik.Core.IStringResourceLoader"/> instance used to provide code-based localization per assembly.
            </summary>
        </member>
        <member name="M:Telerik.Core.LocalizationManager.GetString(System.String)">
            <summary>
            Gets the localized version of the string, associated with the specified key. 
            </summary>
        </member>
        <member name="T:Telerik.Core.IStringResourceLoader">
            <summary>
            Represents a custom loader that may be used to look-up strings through code.
            </summary>
        </member>
        <member name="M:Telerik.Core.IStringResourceLoader.GetString(System.String)">
            <summary>
            Retrieves a localized version of the string associated with the specified key.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadCircle">
            <summary>
            Represents a logical definition of a circle.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadCircle.Center">
            <summary>
            The center of the circle.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadCircle.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadCircle.#ctor(Telerik.Core.RadPoint,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadCircle"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="P:Telerik.Core.RadCircle.Bounds">
            <summary>
            Gets the rectangle that encloses this circle.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadLine.X1">
            <summary>
            The X-coordinate of the line start point.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadLine.X2">
            <summary>
            The X-coordinate of the line end point.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadLine.Y1">
            <summary>
            The Y-coordinate of the line start point.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadLine.Y2">
            <summary>
            The Y-coordinate of the line end point.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadLine.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadLine" /> struct.
            </summary>
            <param name="x1">The x1.</param>
            <param name="x2">The x2.</param>
            <param name="y1">The y1.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Telerik.Core.RadLine.#ctor(Telerik.Core.RadPoint,Telerik.Core.RadPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadLine" /> struct.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Telerik.Core.RadLine.Round(Telerik.Core.RadLine)">
            <summary>
            Rounds the line's values to the closed whole number.
            </summary>
        </member>
        <member name="T:Telerik.Core.RadMath">
            <summary>
            Provides static mathematical functions and constants.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadMath.DegToRadFactor">
            <summary>
            The factor used to convert degrees to their radians equivalent.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadMath.RadToDegFactor">
            <summary>
            The factor used to convert radians to their degree equivalent.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadMath.Epsilon">
            <summary>
            Smallest unit such that 1.0+DBL_EPSILON != 1.0.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.IsZero(System.Double)">
            <summary>
            Determines whether the specified value is close to 0 within the order of EPSILON.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.IsZero(System.Decimal)">
            <summary>
            Determines whether the specified value is close to 0 within the order of EPSILON.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.IsOne(System.Double)">
            <summary>
            Determines whether the specified value is close to 1 within the order of EPSILON.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.IsOne(System.Decimal)">
            <summary>
            Determines whether the specified value is close to 1 within the order of EPSILON.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.AreClose(System.Double,System.Double)">
            <summary>
            Determines whether the two specified values are close within the order of EPSILON.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.AreClose(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the two specified values are close within the order of <paramref name="epsilon"/>.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.GetPointDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the distance between two points in a plane.
            </summary>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
        </member>
        <member name="M:Telerik.Core.RadMath.GetArcPoint(System.Double,Telerik.Core.RadPoint,System.Double)">
            <summary>
            Gets the point that lies on the arc segment of the ellipse, described by the center and radius parameters.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadMath.ToPolarCoordinates(Telerik.Core.RadPoint,Telerik.Core.RadPoint,System.Boolean)">
            <summary>
            Converts cartesian into polar coordinates.
            </summary>
            <param name="point">The point we are converting.</param>
            <param name="centerPoint">The (0,0) point of the the coordinate system.</param>
            <param name="reverse">True to reverse the calculated angle using the (360 - angle) expression, false otherwise.</param>
            <returns> Coordinates as radius and angle (in degrees).</returns>
        </member>
        <member name="T:Telerik.Core.RadPoint">
            <summary>
            Represents a structure that defines a location (X, Y) in a two-dimensional space.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadPoint.Empty">
            <summary>
            A <see cref="T:Telerik.Core.RadPoint"/> instance which X and Y values are set to 0.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadPoint.X">
            <summary>
            The X-coordinate of the point.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadPoint.Y">
            <summary>
            The Y-coordinate of the point.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadPoint"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Telerik.Core.RadPoint.op_Equality(Telerik.Core.RadPoint,Telerik.Core.RadPoint)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadPoint"/> structures are equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadPoint.op_Inequality(Telerik.Core.RadPoint,Telerik.Core.RadPoint)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadSize"/> structures are not equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadPoint.Round(Telerik.Core.RadPoint)">
            <summary>
            Rounds the X and Y members of the specified <see cref="T:Telerik.Core.RadPoint"/>.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Core.RadPoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Telerik.Core.RadRect">
            <summary>
            Represents a Rectangle in the Euclidean plane geometry.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadRect.Invalid">
            <summary>
            Invalid rectangle, which Width and Height properties are set to (-1).
            </summary>
        </member>
        <member name="F:Telerik.Core.RadRect.Empty">
            <summary>
            Empty rectangle which values are zeroes.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadRect.X">
            <summary>
            The X-coordinate of the rectangle.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadRect.Y">
            <summary>
            The Y-coordinate of the rectangle.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadRect.Width">
            <summary>
            The length of the rectangle along the X-axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadRect.Height">
            <summary>
            The length of the rectangle along the Y-axis.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadRect"/> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Telerik.Core.RadRect.#ctor(Telerik.Core.RadPoint,Telerik.Core.RadPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadRect" /> struct.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Telerik.Core.RadRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadRect"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Telerik.Core.RadRect.Bottom">
            <summary>
            Gets the Y-coordinate of the bottom side of the rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadRect.Right">
            <summary>
            Gets the X-coordinate of the right side of the rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadRect.Center">
            <summary>
            Gets the center of this rectangle.
            </summary>
        </member>
        <member name="P:Telerik.Core.RadRect.Location">
            <summary>
            Gets the location (Top-Left corner) of the rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.Round(Telerik.Core.RadRect)">
            <summary>
            Rounds the rectangle's values to the closed whole number.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.Floor(Telerik.Core.RadRect)">
            <summary>
            Rounds the rectangle's value to the closest less than or equal to whole numbers.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.op_Equality(Telerik.Core.RadRect,Telerik.Core.RadRect)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadRect"/> structures are equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.op_Inequality(Telerik.Core.RadRect,Telerik.Core.RadRect)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadRect"/> structures are not equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.Subtract(Telerik.Core.RadRect,Telerik.Core.RadRect)">
            <summary>
            Gets the difference between two <see cref="T:Telerik.Core.RadRect"/> structures.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.ToSquare(Telerik.Core.RadRect,System.Boolean)">
            <summary>
            Gets a rectangle that has equal width and height and is centered within the specified rect.
            </summary>
            <param name="rect">The rect to create the square from.</param>
            <param name="offset">True to offset the rectangle's location to meet the smaller of the Width and Height properties.</param>
        </member>
        <member name="M:Telerik.Core.RadRect.CenterRect(Telerik.Core.RadRect,Telerik.Core.RadRect)">
            <summary>
            Centers the specified rectangle within the provided available one.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.IntersectsWith(Telerik.Core.RadRect)">
            <summary>
            Determines whether the current rect intersects with the specified one.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.IsSizeValid">
            <summary>
            Determines whether the size of this rect is valid - that is both Width and Height should be bigger than zero.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadRect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Core.RadRect.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Core.RadRect.Contains(System.Double,System.Double)">
            <summary>
            Determines if this RadRect instance contains the point that is described by the arguments.
            </summary>
            <param name="x">The X coordinate of the point to check.</param>
            <param name="y">The Y coordinate of the point to check.</param>
            <returns>Returns true if this rectangle contains the point from the arguments and false otherwise.</returns>
        </member>
        <member name="M:Telerik.Core.RadRect.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Telerik.Core.RadSize">
            <summary>
            Represents a structure that defines a size in the two-dimensional space.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadSize.Empty">
            <summary>
            A <see cref="T:Telerik.Core.RadSize"/> instance which Width and Height are set to 0.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadSize.Invalid">
            <summary>
            A <see cref="T:Telerik.Core.RadSize"/> instance which Width and Height are set to -1.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadSize.Width">
            <summary>
            The length along the horizontal axis.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadSize.Height">
            <summary>
            The length along the vertical axis.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadSize.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadSize"/> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Telerik.Core.RadSize.op_Equality(Telerik.Core.RadSize,Telerik.Core.RadSize)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadSize"/> structures are equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadSize.op_Inequality(Telerik.Core.RadSize,Telerik.Core.RadSize)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadSize"/> structures are not equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadSize.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Core.RadSize.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Telerik.Core.RadThickness">
            <summary>
            Represents a structure that defines margins (or padding) of an element.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadThickness.Empty">
            <summary>
            A <see cref="T:Telerik.Core.RadThickness"/> instance with Left, Top, Right, and Bottom components equal to 0.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadThickness.Left">
            <summary>
            Left length.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadThickness.Top">
            <summary>
            Top length.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadThickness.Right">
            <summary>
            Right length.
            </summary>
        </member>
        <member name="F:Telerik.Core.RadThickness.Bottom">
            <summary>
            Bottom length.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadThickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.RadThickness"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Telerik.Core.RadThickness.op_Equality(Telerik.Core.RadThickness,Telerik.Core.RadThickness)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadThickness"/> structures are equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadThickness.op_Inequality(Telerik.Core.RadThickness,Telerik.Core.RadThickness)">
            <summary>
            Determines whether two <see cref="T:Telerik.Core.RadThickness"/> structures are not equal.
            </summary>
        </member>
        <member name="M:Telerik.Core.RadThickness.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Core.RadThickness.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Telerik.Core.ValueRange`1">
            <summary>
            Represents a structure that defines a range of two IComparable structures - like Single or Double.
            </summary>
            <typeparam name="T">Must implement the <see cref="T:System.IComparable"/> interface.</typeparam>
        </member>
        <member name="F:Telerik.Core.ValueRange`1.Empty">
            <summary>
            Empty value range where minimum and maximum are set to their default(T) value.
            </summary>
        </member>
        <member name="M:Telerik.Core.ValueRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.ValueRange`1"/> struct.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="P:Telerik.Core.ValueRange`1.Maximum">
            <summary>
            Gets or sets the maximum of the range.
            </summary>
        </member>
        <member name="P:Telerik.Core.ValueRange`1.Minimum">
            <summary>
            Gets or sets the minimum of the range.
            </summary>
        </member>
        <member name="M:Telerik.Core.ValueRange`1.op_Equality(Telerik.Core.ValueRange{`0},Telerik.Core.ValueRange{`0})">
            <summary>
            Determines whether two ranges are equal.
            </summary>
            <param name="range1">First ValueRange to be compared.</param>
            <param name="range2">Second ValueRange to be compared.</param>
        </member>
        <member name="M:Telerik.Core.ValueRange`1.op_Inequality(Telerik.Core.ValueRange{`0},Telerik.Core.ValueRange{`0})">
            <summary>
            Determines whether two ranges are not equal.
            </summary>
            <param name="range1">First ValueRange to be compared.</param>
            <param name="range2">Second ValueRange to be compared.</param>
        </member>
        <member name="M:Telerik.Core.ValueRange`1.IsInRangeExclusive(`0)">
            <summary>
            Determines whether the specified value is within the range, excluding its minimum and maximum values.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Core.ValueRange`1.IsInRangeInclusive(`0)">
            <summary>
            Determines whether the specified value is within the range, including its minimum and maximum values.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Core.ValueRange`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Core.ValueRange`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Telerik.Core.WeakReferenceList`1">
            <summary>
            Wraps instances of type T in WeakReference and stores them in a List.
            </summary>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.WeakReferenceList`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.WeakReferenceList`1"/> class.
            </summary>
            <param name="cleanNonAlive">True to remove any non-alive instances automatically, false otherwise.</param>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Core.WeakReferenceList`1"/> class.
            </summary>
            <param name="cleanNonAlive">True to remove any non-alive instances automatically, false otherwise.</param>
            <param name="trackResurrection">True to track object resurrection, false otherwise.</param>
        </member>
        <member name="P:Telerik.Core.WeakReferenceList`1.AutoCleanNonAlive">
            <summary>
            Gets or sets a value indicating whether the list will automatically remove any contained non-alive weak reference.
            </summary>
        </member>
        <member name="P:Telerik.Core.WeakReferenceList`1.TrackResurrection">
            <summary>
            Gets or sets a value indicating whether resurrection for all added instances should be tracked.
            </summary>
        </member>
        <member name="P:Telerik.Core.WeakReferenceList`1.Count">
            <summary>
            Gets the count of the list.
            </summary>
        </member>
        <member name="P:Telerik.Core.WeakReferenceList`1.List">
            <summary>
            Gets the internal List used to store all instances.
            </summary>
        </member>
        <member name="P:Telerik.Core.WeakReferenceList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.Add(`0)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified value within the list.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.Remove(`0)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.CleanNonAlive">
            <summary>
            Cleans all targets that are no longer alive.
            </summary>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through all items.
            </summary>
        </member>
        <member name="M:Telerik.Core.WeakReferenceList`1.InsertCore(System.Int32,`0)">
            <summary>
            Core insert implementation. Allows inheritors to provide their own implementation.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
    </members>
</doc>
